#include <stdbool.h>
#include <stdlib.h>

// Assuming struct ListNode is already defined
// struct ListNode {
//     int val;
//     struct ListNode *next;
// };

struct ListNode* reverseList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* curr = head;
    while (curr != NULL) {
        struct ListNode* nextTemp = curr->next;
        curr->next = prev;
        prev = curr;
        curr = nextTemp;
    }
    return prev;
}

bool isPalindrome(struct ListNode* head) {
    if (head == NULL || head->next == NULL) return true;

    // Find the end of the first half and reverse the second half.
    struct ListNode* slow = head;
    struct ListNode* fast = head;
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct ListNode* secondHalfStart = reverseList(slow);
    struct ListNode* firstHalfStart = head;

    // Check whether or not there is a palindrome.
    bool result = true;
    struct ListNode* p1 = firstHalfStart;
    struct ListNode* p2 = secondHalfStart;
    while (result && p2 != NULL) {
        if (p1->val != p2->val) result = false;
        p1 = p1->next;
        p2 = p2->next;
    }

    // Restore the list and return the result.
    reverseList(secondHalfStart);

    return result;
}
